
:autogenerated:

qalgebra.core package
=====================

.. automodule:: qalgebra.core
    


    Submodules:

    .. toctree::
       :maxdepth: 1

       qalgebra.core.abstract_algebra
       qalgebra.core.abstract_quantum_algebra
       qalgebra.core.algebraic_properties
       qalgebra.core.exceptions
       qalgebra.core.hilbert_space_algebra
       qalgebra.core.indexed_operations
       qalgebra.core.matrix_algebra
       qalgebra.core.operator_algebra
       qalgebra.core.scalar_algebra
       qalgebra.core.state_algebra
       qalgebra.core.super_operator_algebra



    Summary
    -------

    ``__all__`` Exceptions:


    .. list-table::
    
       * - :exc:`AlgebraError <qalgebra.core.exceptions.AlgebraError>`
         - Base class for all algebraic errors.
       * - :exc:`AlgebraException <qalgebra.core.exceptions.AlgebraException>`
         - Base class for all algebraic exceptions.
       * - :exc:`BasisNotSetError <qalgebra.core.exceptions.BasisNotSetError>`
         - Raised if the basis or a Hilbert space dimension is unavailable.
       * - :exc:`CannotSimplify <qalgebra.core.exceptions.CannotSimplify>`
         - Raised when a rule cannot further simplify an expression.
       * - :exc:`CannotSymbolicallyDiagonalize <qalgebra.core.exceptions.CannotSymbolicallyDiagonalize>`
         - Matrix cannot be diagonalized analytically.
       * - :exc:`InfiniteSumError <qalgebra.core.exceptions.InfiniteSumError>`
         - Raised when expanding a sum into an infinite number of terms.
       * - :exc:`NoConjugateMatrix <qalgebra.core.exceptions.NoConjugateMatrix>`
         - Raised when entries of :class:`.Matrix` have no defined conjugate.
       * - :exc:`NonSquareMatrix <qalgebra.core.exceptions.NonSquareMatrix>`
         - Raised when a :class:`.Matrix` fails to be square.
       * - :exc:`OverlappingSpaces <qalgebra.core.exceptions.OverlappingSpaces>`
         - Raised when objects fail to be in separate Hilbert spaces.
       * - :exc:`SpaceTooLargeError <qalgebra.core.exceptions.SpaceTooLargeError>`
         - Raised when objects fail to be have overlapping Hilbert spaces.
       * - :exc:`UnequalSpaces <qalgebra.core.exceptions.UnequalSpaces>`
         - Raised when objects fail to be in the same Hilbert space.
    

    ``__all__`` Classes:


    .. list-table::
    
       * - :class:`Adjoint <qalgebra.core.operator_algebra.Adjoint>`
         - Symbolic Adjoint of an operator
       * - :class:`BasisKet <qalgebra.core.state_algebra.BasisKet>`
         - Local basis state, identified by index or label
       * - :class:`Bra <qalgebra.core.state_algebra.Bra>`
         - The associated dual/adjoint state for any ket
       * - :class:`BraKet <qalgebra.core.state_algebra.BraKet>`
         - The symbolic inner product between two states
       * - :class:`CoherentStateKet <qalgebra.core.state_algebra.CoherentStateKet>`
         - Local coherent state, labeled by a complex amplitude $\alpha$.
       * - :class:`Commutator <qalgebra.core.operator_algebra.Commutator>`
         - Commutator of two operators
       * - :class:`Expression <qalgebra.core.abstract_algebra.Expression>`
         - Base class for all QAlgebra Expressions.
       * - :class:`HilbertSpace <qalgebra.core.hilbert_space_algebra.HilbertSpace>`
         - Base class for Hilbert spaces
       * - :class:`IndexedSum <qalgebra.core.indexed_operations.IndexedSum>`
         - Base class for indexed sums.
       * - :class:`KetBra <qalgebra.core.state_algebra.KetBra>`
         - Outer product of two states
       * - :class:`KetIndexedSum <qalgebra.core.state_algebra.KetIndexedSum>`
         - Indexed sum over Kets.
       * - :class:`KetPlus <qalgebra.core.state_algebra.KetPlus>`
         - Sum of states.
       * - :class:`KetSymbol <qalgebra.core.state_algebra.KetSymbol>`
         - Symbolic state.
       * - :class:`LocalKet <qalgebra.core.state_algebra.LocalKet>`
         - A state on a :class:`.LocalSpace`.
       * - :class:`LocalOperator <qalgebra.core.operator_algebra.LocalOperator>`
         - Base class for "known" operators on a :class:`.LocalSpace`.
       * - :class:`LocalSigma <qalgebra.core.operator_algebra.LocalSigma>`
         - Level flip operator between two levels of a :class:`.LocalSpace`.
       * - :class:`LocalSpace <qalgebra.core.hilbert_space_algebra.LocalSpace>`
         - Hilbert space for a single degree of freedom.
       * - :class:`Matrix <qalgebra.core.matrix_algebra.Matrix>`
         - Matrix of Expressions.
       * - :class:`NullSpaceProjector <qalgebra.core.operator_algebra.NullSpaceProjector>`
         - Projection operator onto the nullspace of its operand.
       * - :class:`Operation <qalgebra.core.abstract_algebra.Operation>`
         - Base class for "operations"
       * - :class:`Operator <qalgebra.core.operator_algebra.Operator>`
         - Base class for all quantum operators.
       * - :class:`OperatorDerivative <qalgebra.core.operator_algebra.OperatorDerivative>`
         - Symbolic partial derivative of an operator
       * - :class:`OperatorIndexedSum <qalgebra.core.operator_algebra.OperatorIndexedSum>`
         - Indexed sum over operators
       * - :class:`OperatorPlus <qalgebra.core.operator_algebra.OperatorPlus>`
         - Sum of Operators
       * - :class:`OperatorPlusMinusCC <qalgebra.core.operator_algebra.OperatorPlusMinusCC>`
         - An operator plus or minus its complex conjugate.
       * - :class:`OperatorSymbol <qalgebra.core.operator_algebra.OperatorSymbol>`
         - Symbolic operator
       * - :class:`OperatorTimes <qalgebra.core.operator_algebra.OperatorTimes>`
         - Product of operators
       * - :class:`OperatorTimesKet <qalgebra.core.state_algebra.OperatorTimesKet>`
         - Product of an operator and a state.
       * - :class:`OperatorTrace <qalgebra.core.operator_algebra.OperatorTrace>`
         - (Partial) trace of an operator
       * - :class:`ProductSpace <qalgebra.core.hilbert_space_algebra.ProductSpace>`
         - Tensor product of local Hilbert spaces.
       * - :class:`PseudoInverse <qalgebra.core.operator_algebra.PseudoInverse>`
         - Unevaluated pseudo-inverse $\Op{X}^+$ of an operator $\Op{X}$.
       * - :class:`QuantumAdjoint <qalgebra.core.abstract_quantum_algebra.QuantumAdjoint>`
         - Base class for adjoints of quantum expressions
       * - :class:`QuantumDerivative <qalgebra.core.abstract_quantum_algebra.QuantumDerivative>`
         - Symbolic partial derivative.
       * - :class:`QuantumExpression <qalgebra.core.abstract_quantum_algebra.QuantumExpression>`
         - Base class for expressions associated with a Hilbert space
       * - :class:`QuantumIndexedSum <qalgebra.core.abstract_quantum_algebra.QuantumIndexedSum>`
         - Base class for indexed sums of quantum expressions.
       * - :class:`QuantumOperation <qalgebra.core.abstract_quantum_algebra.QuantumOperation>`
         - Base class for operations on quantum expression
       * - :class:`QuantumPlus <qalgebra.core.abstract_quantum_algebra.QuantumPlus>`
         - General implementation of addition of quantum expressions
       * - :class:`QuantumSymbol <qalgebra.core.abstract_quantum_algebra.QuantumSymbol>`
         - Symbolic element of an algebra.
       * - :class:`QuantumTimes <qalgebra.core.abstract_quantum_algebra.QuantumTimes>`
         - General implementation of product of quantum expressions
       * - :class:`SPost <qalgebra.core.super_operator_algebra.SPost>`
         - Linear post-multiplication operator.
       * - :class:`SPre <qalgebra.core.super_operator_algebra.SPre>`
         - Linear pre-multiplication operator
       * - :class:`Scalar <qalgebra.core.scalar_algebra.Scalar>`
         - Base class for Scalars
       * - :class:`ScalarDerivative <qalgebra.core.scalar_algebra.ScalarDerivative>`
         - Symbolic partial derivative of a scalar
       * - :class:`ScalarExpression <qalgebra.core.scalar_algebra.ScalarExpression>`
         - Base class for scalars with non-scalar arguments
       * - :class:`ScalarIndexedSum <qalgebra.core.scalar_algebra.ScalarIndexedSum>`
         - Indexed sum over scalars.
       * - :class:`ScalarPlus <qalgebra.core.scalar_algebra.ScalarPlus>`
         - Sum of scalars
       * - :class:`ScalarPower <qalgebra.core.scalar_algebra.ScalarPower>`
         - A scalar raised to a power.
       * - :class:`ScalarTimes <qalgebra.core.scalar_algebra.ScalarTimes>`
         - Product of scalars
       * - :class:`ScalarTimesKet <qalgebra.core.state_algebra.ScalarTimesKet>`
         - Product of a :class:`.Scalar` coefficient and a ket
       * - :class:`ScalarTimesOperator <qalgebra.core.operator_algebra.ScalarTimesOperator>`
         - Product of a :class:`.Scalar` coefficient and an :class:`.Operator`.
       * - :class:`ScalarTimesQuantumExpression <qalgebra.core.abstract_quantum_algebra.ScalarTimesQuantumExpression>`
         - Product of a :class:`.Scalar` and a :class:`.QuantumExpression`
       * - :class:`ScalarTimesSuperOperator <qalgebra.core.super_operator_algebra.ScalarTimesSuperOperator>`
         - Product of a :class:`.Scalar` coefficient and a :class:`.SuperOperator`.
       * - :class:`ScalarValue <qalgebra.core.scalar_algebra.ScalarValue>`
         - Wrapper around a numeric or symbolic value
       * - :class:`SingleQuantumOperation <qalgebra.core.abstract_quantum_algebra.SingleQuantumOperation>`
         - Base class for operations on a single quantum expression
       * - :class:`State <qalgebra.core.state_algebra.State>`
         - Base class for states in a Hilbert space
       * - :class:`StateDerivative <qalgebra.core.state_algebra.StateDerivative>`
         - Symbolic partial derivative of a state
       * - :class:`SuperAdjoint <qalgebra.core.super_operator_algebra.SuperAdjoint>`
         - Adjoint of a super-operator.
       * - :class:`SuperOperator <qalgebra.core.super_operator_algebra.SuperOperator>`
         - Base class for super-operators
       * - :class:`SuperOperatorDerivative <qalgebra.core.super_operator_algebra.SuperOperatorDerivative>`
         - Symbolic partial derivative of a super-operator
       * - :class:`SuperOperatorPlus <qalgebra.core.super_operator_algebra.SuperOperatorPlus>`
         - A sum of super-operators
       * - :class:`SuperOperatorSymbol <qalgebra.core.super_operator_algebra.SuperOperatorSymbol>`
         - Symbolic super-operator
       * - :class:`SuperOperatorTimes <qalgebra.core.super_operator_algebra.SuperOperatorTimes>`
         - Product of super-operators
       * - :class:`SuperOperatorTimesOperator <qalgebra.core.super_operator_algebra.SuperOperatorTimesOperator>`
         - Application of a super-operator to an operator.
       * - :class:`TensorKet <qalgebra.core.state_algebra.TensorKet>`
         - A tensor product of kets.
    

    ``__all__`` Functions:


    .. list-table::
    
       * - :func:`KroneckerDelta <qalgebra.core.scalar_algebra.KroneckerDelta>`
         - Kronecker delta symbol.
       * - :func:`LocalProjector <qalgebra.core.operator_algebra.LocalProjector>`
         - A projector onto a specific level of a :class:`.LocalSpace`
       * - :func:`Sum <qalgebra.core.abstract_quantum_algebra.Sum>`
         - Instantiator for an arbitrary indexed sum.
       * - :func:`adjoint <qalgebra.core.operator_algebra.adjoint>`
         - Return the adjoint of an obj.
       * - :func:`anti_commutator <qalgebra.core.super_operator_algebra.anti_commutator>`
         - If ``B != None``, return the anti-commutator :math:`\{A,B\}`, otherwise return the super-operator :math:`\{A,\cdot\}`.
       * - :func:`block_matrix <qalgebra.core.matrix_algebra.block_matrix>`
         - Generate the operator matrix with quadrants
       * - :func:`commutator <qalgebra.core.super_operator_algebra.commutator>`
         - Commutator of `A` and `B`
       * - :func:`decompose_space <qalgebra.core.operator_algebra.decompose_space>`
         - Simplifies OperatorTrace expressions over tensor-product spaces by turning it into iterated partial traces.
       * - :func:`diagm <qalgebra.core.matrix_algebra.diagm>`
         - Generalizes the diagonal matrix creation capabilities of `numpy.diag` to :class:`.Matrix` objects.
       * - :func:`factor_coeff <qalgebra.core.operator_algebra.factor_coeff>`
         - Factor out coefficients of all factors.
       * - :func:`factor_for_trace <qalgebra.core.operator_algebra.factor_for_trace>`
         - Factor `ls` out of `op` for easy tracing.
       * - :func:`get_coeffs <qalgebra.core.operator_algebra.get_coeffs>`
         - Create a dictionary with all Operator terms of the expression (understood as a sum) as keys and their coefficients as values.
       * - :func:`hstackm <qalgebra.core.matrix_algebra.hstackm>`
         - Generalizes `numpy.hstack` to :class:`.Matrix` objects.
       * - :func:`identity_matrix <qalgebra.core.matrix_algebra.identity_matrix>`
         - Generate the N-dimensional identity matrix.
       * - :func:`lindblad <qalgebra.core.super_operator_algebra.lindblad>`
         - Return the super-operator Lindblad term of the Lindblad operator `C`
       * - :func:`liouvillian <qalgebra.core.super_operator_algebra.liouvillian>`
         - Return the Liouvillian super-operator associated with `H` and `Ls`
       * - :func:`rewrite_with_operator_pm_cc <qalgebra.core.operator_algebra.rewrite_with_operator_pm_cc>`
         - Try to rewrite expr using :class:`.OperatorPlusMinusCC`.
       * - :func:`sqrt <qalgebra.core.scalar_algebra.sqrt>`
         - Square root of a :class:`.Scalar` or scalar value.
       * - :func:`substitute <qalgebra.core.abstract_algebra.substitute>`
         - Substitute symbols or (sub-)expressions with the given replacements.
       * - :func:`tr <qalgebra.core.abstract_algebra.Expression.create>`
         - Instantiate while applying automatic simplifications.
       * - :func:`vstackm <qalgebra.core.matrix_algebra.vstackm>`
         - Generalizes `numpy.vstack` to :class:`.Matrix` objects.
       * - :func:`zerosm <qalgebra.core.matrix_algebra.zerosm>`
         - Generalizes ``numpy.zeros`` to :class:`.Matrix` objects.
    

    ``__all__`` Data:


    .. list-table::
    
       * - :obj:`FullSpace <qalgebra.core.hilbert_space_algebra.FullSpace>`
         - The 'full space', i.e.
       * - :obj:`II <qalgebra.core.operator_algebra.IdentityOperator>`
         - ``IdentityOperator`` constant (singleton) object.
       * - :obj:`IdentityOperator <qalgebra.core.operator_algebra.IdentityOperator>`
         - ``IdentityOperator`` constant (singleton) object.
       * - :obj:`IdentitySuperOperator <qalgebra.core.super_operator_algebra.IdentitySuperOperator>`
         - Neutral element for product of super-operators
       * - :obj:`One <qalgebra.core.scalar_algebra.One>`
         - The neutral element with respect to scalar multiplication
       * - :obj:`TrivialKet <qalgebra.core.state_algebra.TrivialKet>`
         - TrivialKet constant (singleton) object.
       * - :obj:`TrivialSpace <qalgebra.core.hilbert_space_algebra.TrivialSpace>`
         - The 'nullspace', i.e.
       * - :obj:`Zero <qalgebra.core.scalar_algebra.Zero>`
         - The neutral element with respect to scalar addition
       * - :obj:`ZeroKet <qalgebra.core.state_algebra.ZeroKet>`
         - ZeroKet constant (singleton) object for the null-state.
       * - :obj:`ZeroOperator <qalgebra.core.operator_algebra.ZeroOperator>`
         - ``ZeroOperator`` constant (singleton) object.
       * - :obj:`ZeroSuperOperator <qalgebra.core.super_operator_algebra.ZeroSuperOperator>`
         - Neutral element for sum of super-operators
    


