name: Docs

on: [push, ]

jobs:

  build_docs:
    name: Build Sphinx docs
    runs-on: ubuntu-18.04
    container:
      image: docker.pkg.github.com/goerz-docker/docs-build-env/docs-build-env:scientific
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:

      - uses: actions/checkout@v2

      - name: Build the docs
        id: build
        run: |
          set -x
          python -m pip install -e .[dev]
          python -m pip install zip-files
          export VERSION=$(python -c 'import qalgebra; print(qalgebra.__version__, end="")')
          python -m sphinx -W "docs/sources/" -d "docs/_build/doctree" "docs/_build/html"
          python -m sphinx -W "docs/sources/" -d "docs/_build/doctree" -b latex "docs/_build/latex"
          python docs/sources/build_pdf.py docs/_build/latex/qalgebra.tex
          SPHINX_MATH_RENDERER=imgmath python -m sphinx -W "docs/sources/" -d "docs/_build/doctree" -b epub docs/_build/epub
          zip-folder --debug --auto-root --outfile "qalgebra-docs-$VERSION.zip" docs/_build/html
          mv docs/_build/latex/qalgebra.pdf "qalgebra-docs-$VERSION.pdf"
          mv docs/_build/epub/QAlgebra.epub "qalgebra-docs-$VERSION.epub"
          touch docs/_build/html/_downloads
          echo ::set-output name=VERSION::$VERSION

      - name: Make a Github release and set _downloads links
        shell: bash
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          set -x
          git fetch --tags --force  # restore tag info that actions/checkout pruned
          tag_name="${GITHUB_REF##*/}"
          release_title=$(git tag -l --format='%(contents:subject)' "$tag_name")
          git tag -l --format='%(contents:body)' "$tag_name" | tee RELEASE_NOTES.md
          gh release create "$tag_name" ./qalgebra-docs-${{ steps.build.outputs.VERSION }}.* --notes-file RELEASE_NOTES.md --title="$release_title"
          epub=$(gh api "repos/${{ github.repository }}/releases/tags/$tag_name" | jq '.assets[] | .browser_download_url' | sed 's/"//g' | grep 'epub$')
          pdf=$(gh api "repos/${{ github.repository }}/releases/tags/$tag_name" | jq '.assets[] | .browser_download_url' | sed 's/"//g' | grep 'pdf$')
          zip=$(gh api "repos/${{ github.repository }}/releases/tags/$tag_name" | jq '.assets[] | .browser_download_url' | sed 's/"//g' | grep 'zip$')
          echo "[html]: $zip" >> docs/_build/html/_downloads
          echo "[epub]: $epub" >> docs/_build/html/_downloads
          echo "[pdf]: $pdf" >> docs/_build/html/_downloads
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy documentation to gh-pages
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          set -x
          # Clone gh-pages
          git clone --branch gh-pages https://github.com/${{ github.repository }} gh-pages
          # Run rsync
          branch_name=$(echo ${GITHUB_REF##*/} | tr / -)
          rsync -av --delete "./docs/_build/html/" "./gh-pages/$branch_name/"
          # Run docs-versions-menu
          cd gh-pages
          docs-versions-menu
          # Commit and push
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add -A --verbose
          git status
          git log --format=%B -n 1 | tee .git/_github_actions_commit_msg
          loglastline=$(cat .git/_github_actions_commit_msg | grep -v '^$' | tail -n1)
          logauthor=$(git log --format=%an -n 1)
          if [[ "$logauthor" == "github-actions"* && "$loglastline" == *"${{ github.ref }}"* ]];
          then
            # we ammend if the previous commit was down by Github Actions and was based on the same branch/tag name
            echo "Amending previous commit"
            echo "Deployed from commit ${GITHUB_SHA} (${GITHUB_REF})" >> .git/_github_actions_commit_msg
            git commit --verbose --amend -F .git/_github_actions_commit_msg
          else
            echo "Making new commit"
            git commit --verbose -m "Auto-update from Github Actions Workflow" -m "Deployed from commit ${GITHUB_SHA} (${GITHUB_REF})"
          fi
          git log -n 1
          git push --verbose --force https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/${{ github.repository }} gh-pages
        env:
          DOCS_VERSIONS_MENU_DEBUG: 'true'
          GITHUB_ACTOR: ${{ secrets.GITHUB_ACTOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/upload-artifact@v2
        name: Upload documentation artifacts
        with:
          name: qalgebra-docs
          path: |
            RELEASE_NOTES.md
            ./docs/_build/html/_downloads
            ./qalgebra-docs-${{ steps.build.outputs.VERSION }}.*
